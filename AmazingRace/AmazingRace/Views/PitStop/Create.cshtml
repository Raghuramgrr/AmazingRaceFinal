@model AmazingRace.Model.PitStop
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutManage.cshtml";
}

<div id="wrapper"> 
    <div class="form-group">
    @Html.LabelFor(model => model.EventId, "EventId", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @*@Html.DropDownListFor(model => model.EventId, new SelectList(ViewBag.EventNameList, "Value", "Text"))*@
        @Html.DropDownListFor(model => model.EventId, (IEnumerable<SelectListItem>)ViewBag.EventNameList))
        @Html.ValidationMessageFor(model => model.EventId, "", new { @class = "text-danger" })
    </div>
    </div>
    <div class="col col-lg-12">
        <h2>Create Pitstops</h2>

        <div class="col">
            <div class="col" id="mapid" style="height: 480px;">
                <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBZO1FRSY8skfvBly_1tTAR_uU7mbQDMWk&sensor=false&callback=initialize"
                        async defer"></script>
                <script>

                    var map;
                    var directionsDisplay;
                    var directionsService;
                    var locations = [];
                    var pitstops = [];
                    var request;

                    window.initialize = function () {
                        directionsService = new google.maps.DirectionsService();
                        directionsDisplay = new google.maps.DirectionsRenderer();
                        request = {
                            travelMode: google.maps.TravelMode.DRIVING
                        };
                        var myLatLng = new google.maps.LatLng(1.4, 103.79),
                            myOptions = {
                                zoom: 11,
                                center: myLatLng,
                                mapTypeId: google.maps.MapTypeId.ROADMAP
                            },
                            map = new google.maps.Map(document.getElementById('mapid'), myOptions);
                        directionsDisplay.setMap(map);
                        google.maps.event.addListener(map, 'click', function (event) {
                            var addr = geocodePosition(event.latLng.lat(), event.latLng.lng());
                            locations.push([event.latLng.lat(), event.latLng.lng()]);
                            placeMarker(map, event.latLng, addr);
                        });
                    }


                    function calRoute() {
                        for (i = 0; i < locations.length; i++) {
                            if (i == 0) request.origin = new google.maps.LatLng(locations[i][0], locations[i][1])
                            else if (i == locations.length - 1) request.destination = new google.maps.LatLng(locations[i][0], locations[i][1]);
                            else {
                                if (!request.waypoints) request.waypoints = [];
                                request.waypoints.push({
                                    location: new google.maps.LatLng(locations[i][0], locations[i][1]),
                                    stopover: false
                                });
                            }
                        }
                        directionsService.route(request, function (result, status) {
                            if (status == google.maps.DirectionsStatus.OK) {
                                directionsDisplay.setDirections(result);
                            }
                        });

                    }

                    function placeMarker(map, location, addr) {
                        var marker = new google.maps.Marker({
                            position: location,
                            title: addr,
                            map: map
                        });
                    }

                    function geocodePosition(lat, lng) {
                        var latlng = new google.maps.LatLng(lat, lng);
                        var geocoder = new google.maps.Geocoder();
                        var address;
                        geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                            if (status !== google.maps.GeocoderStatus.OK) {
                                alert(status);
                            }
                            if (status == google.maps.GeocoderStatus.OK) {
                                address = (results[0].formatted_address);
                                pitstops.push(address);
                            }
                        });

                        return address;
                    }

                    function createPits() {
                        eventId = $('#EventId').val();
                        $.ajax({
                            type: 'POST',
                            url: '/Pitstop/Create',
                            data: { pitstops: pitstops, eventId: eventId },
                            traditional: true,
                            success: function (response) {
                                //alert('Success');
                                window.location.replace("/PitStop/Index");

                            }
                        });
                    }
                </script>
            </div>
            <div class="col" align="left">
                <br /><input type="button" class="btn-primary" value="See Route" onclick="calRoute();" />
                <input type="button" class="btn-primary" align="right" value="Create" onclick="createPits();" />
            </div>
        </div>
    </div>
</div>

