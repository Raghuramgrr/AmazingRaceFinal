@{
    ViewBag.Title = "Live Map";
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <style>
        html {
            height: 100%;
        }

        body {
            height: 100%;
            margin: 0px;
            font-family: Helvetica,Arial;
        }
    </style>
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?key=AIzaSyBQpTfnSPnxpYrCHraovUUS70x_B2FXKIc"></script>
    <script type="text/javascript" src="http://www.geocodezip.com/scripts/v3_epoly.js"></script>
    <script type="text/javascript">

  var map;
  var directionDisplay;
  var directionsService;
  var stepDisplay;

  var position;
  var marker = [];
  var polyline = [];
  var poly2 = [];
  var poly = null;
  var startLocation = [];
  var endLocation = [];
  var timerHandle = [];


  var speed = 0.00005, wait = 1;
  var infowindow = null;

  var myPano;
  var panoClient;
  var nextPanoId;

  var startLoc = [];
  var endLoc = [];
 var wayPts = [];
        var allLoc = [];
        var teamName = [];

  var Colors = ["#FF0000", "#00FF00", "#0000FF"];


        function initialize() {

             @foreach(var team in ((List<String>)@ViewBag.teamName))
            {
                        @:teamName.push('@team');

            }

            @foreach(var strtloc in ((List<string>)@ViewBag.strtLoc))
            {
                        @:startLoc.push('@strtloc');
                        @:allLoc.push(startLoc[0]);

            }


            @foreach(var waypts in ((List<string>)@ViewBag.wayPts))
            {
                @:wayPts.push({ location: '@waypts', stopover: true });
                @:allLoc.push('@waypts');
    }

             @foreach(var endloc in ((List<string>)@ViewBag.endLoc))
            {
                        @:endLoc.push('@endloc');
                        @:allLoc.push(endLoc[0]);
            }



  infowindow = new google.maps.InfoWindow(
    {
      size: new google.maps.Size(150,50)
    });

    var myOptions = {
      zoom: 20,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    }
    map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
    geocoder = new google.maps.Geocoder();
        geocoder.geocode({ 'address': 'Singapore' }, function (results, status) {
     map.fitBounds(results[0].geometry.viewport);

    });
  }


function createMarker(latlng, label, html) {
    var contentString = '<b>'+label+'</b><br>'+html;
    var marker = new google.maps.Marker({
        position: latlng,
        map: map,
        title: label,
        zIndex: Math.round(latlng.lat()*-100000)<<5
        });
        marker.myname = label;


    google.maps.event.addListener(marker, 'click', function() {
        infowindow.setContent(contentString);
        infowindow.open(map,marker);
        });
    return marker;
}

function setRoutes(){

    var directionsDisplay = new Array();

    for (var i=0; i< startLoc.length; i++){

    var rendererOptions = {
        map: map,
        suppressMarkers : false,
        preserveViewport: true
    }
    directionsService = new google.maps.DirectionsService();

        var travelMode = google.maps.DirectionsTravelMode.WALKING ;

    var request = {
        origin: startLoc[i],
        waypoints: wayPts ,
        optimizeWaypoints: true,
        destination: endLoc[i],
        travelMode: travelMode
    };

        directionsService.route(request,makeRouteCallback(i,directionsDisplay[i]));

    }


    function makeRouteCallback(routeNum,disp){

        return function(response, status){

          if (status == google.maps.DirectionsStatus.OK){

            var bounds = new google.maps.LatLngBounds();
            var route = response.routes[0];
            startLocation[routeNum] = new Object();
            endLocation[routeNum] = new Object();
            polyline[routeNum] = new google.maps.Polyline({
            path: [],
            strokeColor: '#FFFF00',
            strokeWeight: 3
            });



            // For each route, display summary information.
            var path = response.routes[0].overview_path;
            var legs = response.routes[0].legs;


            disp = new google.maps.DirectionsRenderer(rendererOptions);
            disp.setMap(map);
            disp.setDirections(response);


            //Markers
            for (i=0;i<legs.length;i++) {

                startLocation[routeNum].latlng = legs[i].start_location;
                startLocation[routeNum].address = legs[i].start_address;
                marker[routeNum] = createMarker(legs[i].start_location,"start",legs[i].start_address,"green");

              endLocation[routeNum].latlng = legs[i].end_location;
              endLocation[routeNum].address = legs[i].end_address;
              var steps = legs[i].steps;

              for (j=0;j<steps.length;j++) {
                var nextSegment = steps[j].path;
                var nextSegment = steps[j].path;

                for (k=0;k<nextSegment.length;k++) {
                    polyline[routeNum].getPath().push(nextSegment[k]);
                }

              }
            }

         }

         polyline[routeNum].setMap(map);

         startAnimation(routeNum);

    }

  }

}

    var lastVertex = 1;
    var stepnum=0;
    var step = 50; // 5; // metres
    var tick = 100; // milliseconds
    var eol= [];
//----------------------------------------------------------------------
 function updatePoly(i,d) {
 // Spawn a new polyline every 20 vertices, because updating a 100-vertex poly is too slow
    if (poly2[i].getPath().getLength() > 20) {
          poly2[i]=new google.maps.Polyline([polyline[i].getPath().getAt(lastVertex-1)]);
        }

    if (polyline[i].GetIndexAtDistance(d) < lastVertex+2) {
        if (poly2[i].getPath().getLength()>1) {
            poly2[i].getPath().removeAt(poly2[i].getPath().getLength()-1)
        }
        poly2[i].getPath().insertAt(poly2[i].getPath().getLength(), polyline[i].GetPointAtDistance(d));
    } else {
        poly2[i].getPath().insertAt(poly2[i].getPath().getLength(),endLocation[i].latlng);
    }
 }
//----------------------------------------------------------------------------


        var sortedDict;
        var _kCord = 0, _lCord = 0;
        var _mCord = 0, _nCord = 0;
        var _oCord = 0, _pCord = 0;
        var _qCord = 0, _rCord = 0;
        var _sCord = 0, _tCord = 0;
        var _uCord = 0, _vCord = 0;
        var _midpoint;
        var _totalDist;
        var distteam1, distteam2, distteam3, distteam4, distteam5, distteam6, distteam7, distteam8, distteam9;
        var distteam10;
        var distance = [];
        var eol = [];
        function animate(index, d) {
            
            _midpoint = polyline[0].GetPointAtDistance(1);
            _totalDist = polyline[0].Distance();
            if (d > _totalDist) {
                // alert('d is greater');
                clearTimeout(timerHandle);
               // break;
                return true;
                //marker[index].setPosition(endLocation[index].latlng);
                //return;
            }
           
            var p = polyline[index].GetPointAtDistance(d);
            if (index == 0) {
                _kCord = polyline[index].GetPointAtDistance(d);
                if (d > 5000 && d < 5150) {

                }
            }

            if (index == 1) {
                _lCord = polyline[index].GetPointAtDistance(d);
            }

            if (index == 2) {
                _mCord = polyline[index].GetPointAtDistance(d);
                if (d > 7000 && d < 7150) {
                    //Thread.sleep(3000);
                }


            }
            if (index == 3) {
                _nCord = polyline[index].GetPointAtDistance(d);
            }
            if (index == 4) {
                _oCord = polyline[index].GetPointAtDistance(d);

            }
            if (index == 5) {
                _pCord = polyline[index].GetPointAtDistance(d);
                if (d > 9000 && d < 9250)
                    Thread.sleep(3000);

            }
            if (index == 6) {
                _qCord = polyline[index].GetPointAtDistance(d);

            }
            if (index == 7) {
                _rCord = polyline[index].GetPointAtDistance(d);

            }
            if (index == 8) {
                _sCord = polyline[index].GetPointAtDistance(d);

            }
            if (index == 9) {
                _tCord = polyline[index].GetPointAtDistance(d);

            }
            if (index == 10) {
                _uCord = polyline[index].GetPointAtDistance(d);

            }
            marker[index].setPosition(p);

            updatePoly(index, d);

            timerHandle[index] = setTimeout("animate(" + index + "," + (d + step) + ")", tick);
          
            if (_kCord != 0) {
                distteam0 = google.maps.geometry.spherical.computeDistanceBetween(_kCord, _midpoint);
                distance.push({
                    key: teamName[0],
                    value: distteam0
                });
                sendUpdate(teamName[0], distteam0,'0','0');
            }
            if (_lCord != 0) {
                distteam1 = google.maps.geometry.spherical.computeDistanceBetween(_lCord, _midpoint);
                distance.push({
                    key: teamName[1],
                    value: distteam1
                });
                sendUpdate(teamName[1], distteam1,'0', '0');
            }
            if (_mCord != 0) {
                distteam2 = google.maps.geometry.spherical.computeDistanceBetween(_mCord, _midpoint);
                distance.push({
                    key: teamName[2],
                    value: distteam2
                });
                sendUpdate(teamName[2], distteam2,'0', '0');
            }
            if (_nCord != 0) {

                distteam3 = google.maps.geometry.spherical.computeDistanceBetween(_nCord, _midpoint);
                distance.push({
                    key: teamName[3],
                    value: distteam3
                });
                sendUpdate(teamName[3], distteam3, '0', '0');
            }
            if (_oCord != 0) {
                distteam4 = google.maps.geometry.spherical.computeDistanceBetween(_oCord, _midpoint);
                distance.push({
                    key: teamName[4],
                    value: distteam4
                });
                sendUpdate(teamName[4], distteam4, '0', '0');
            }
            if (_pCord != 0) {
                distteam5 = google.maps.geometry.spherical.computeDistanceBetween(_pCord, _midpoint);
                distance.push({
                    key: teamName[5],
                    value: distteam5
                });
                sendUpdate(teamName[5], distteam5, '0', '0');
            }
            if (_qCord != 0) {
                distteam6 = google.maps.geometry.spherical.computeDistanceBetween(_qCord, _midpoint);
                distance.push({
                    key: teamName[6],
                    value: distteam6
                });
                sendUpdate(teamName[6], distteam6, '0', '0');
            }
            if (_rCord != 0) {
                distteam7 = google.maps.geometry.spherical.computeDistanceBetween(_rCord, _midpoint);
                distance.push({
                    key: teamName[7],
                    value: distteam7
                });
                sendUpdate(teamName[7], distteam7, '0', '0');
            }
            if (_sCord != 0) {
                distteam8 = google.maps.geometry.spherical.computeDistanceBetween(_sCord, _midpoint);
                distance.push({
                    key: teamName[8],
                    value: distteam8
                });
                sendUpdate(teamName[8], distteam8, '0', '0');
            }
            if (_tCord != 0) {
                distteam9 = google.maps.geometry.spherical.computeDistanceBetween(_tCord, _midpoint);
                distance.push({
                    key: teamName[9],
                    value: distteam9
                });
                sendUpdate(teamName[9], distteam9, '0', '0');
            }

            console.log('dist1 team1 ' + distteam0);
            console.log('dist2 team2 ' + distteam1);
            console.log('dist3 team3 ' + distteam2);
            console.log('dist4 team4 ' + distteam3);
            console.log('dist5 team5 ' + distteam4);

           
           /* setTimeout(function () {
                var result = Object.values(distance).sort(function (a, b) {
                    return distance[b] - distance[a];
                })

              //  console.log(result)
                //alert('' + result);
            }, 3000);*/
        }
        //-------------------------------------------------------------------------
        function sleep_until(seconds) {
            var max_sec = new Date().getTime();
            while (new Date() < max_sec + seconds * 1000) { }
            return true;
        }


        //------------------------------------------------------------------------
        function sleep(milliseconds) {
            var start = new Date().getTime();
            for (var i = 0; i < 1e7; i++) {
                if ((new Date().getTime() - start) > milliseconds) {
                    continueExecution;
                }
            }
        }



        function startAnimation(index) {
            if (timerHandle[index]) clearTimeout(timerHandle[index]);
            map.setCenter(polyline[index].getPath().getAt(0));
            poly2[index] = new google.maps.Polyline({ path: [polyline[index].getPath().getAt(0)], strokeColor: "#FFFF00", strokeWeight: 3 });
            if (index == 0) {
                timerHandle[index] = setTimeout("animate(" + index + ",3000)", 2500);
            }
            if (index == 1) {
                timerHandle[index] = setTimeout("animate(" + index + ",randomIntFromInterval())", 300);
            }
            if (index == 2)
                timerHandle[index] = setTimeout("animate(" + index + ",randomIntFromInterval())", 250);
            if (index == 3)
                timerHandle[index] = setTimeout("animate(" + index + ",randomIntFromInterval())", 250);
            if (index == 4)
                timerHandle[index] = setTimeout("animate(" + index + ",randomIntFromInterval())", 250);
            if (index == 5)
                timerHandle[index] = setTimeout("animate(" + index + ",randomIntFromInterval())", 250);
            if (index == 6)
                timerHandle[index] = setTimeout("animate(" + index + ",randomIntFromInterval())", 250);
            if (index == 7)
                timerHandle[index] = setTimeout("animate(" + index + ",randomIntFromInterval())", 250);
            if (index == 8)
                timerHandle[index] = setTimeout("animate(" + index + ",randomIntFromInterval())", 250);
            if (index == 9)
                timerHandle[index] = setTimeout("animate(" + index + ",randomIntFromInterval())", 250);
            if (index == 10)
                timerHandle[index] = setTimeout("animate(" + index + ",randomIntFromInterval())", 250);
            

        }

        function randomIntFromInterval() {
            //alert("this is random");
            return Math.floor(Math.random() * (3000 - 2000 + 1) + 2000);
        }


        function sendUpdate(teamName, position, pitStpCrossed, pitStpRem) {
            $.ajax({
                url: "/api/LeaderBoardWebApi",
                type: "Put",
                data: JSON.stringify([teamName, position, pitStpCrossed, pitStpRem]),
                contentType: 'application/json; charset=utf-8',
                success: function (data) {

                },
                error: function (msg) { } //alert(msg); }
            });
         }


    </script>
</head>
<body onload="initialize()">
    <div id="tools">
        <button onclick="setRoutes();">Start</button>
    </div>
    <div id="map_canvas" style="width:1000px;height:1000px;"></div>

    <!--Reference the jQuery library. -->
    <script src="/Scripts/jquery-1.10.2.js"></script>
</body>
</html>
